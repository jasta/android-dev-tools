#!/usr/bin/env perl
###############################################################################
##
## Simple script designed to insert after "adb logcat" in a pipeline to track a
## specific package's logcat messages.
##
## I typically invoke this script as a function in my profile:
##
## function plogcat() {
##    adb logcat | proclogcat $* | coloredlogcat.py
## }
##
## Then run as:
##
## $ plogcat org.devtcg.five
##
###############################################################################

use strict;
use Data::Dumper;

###############################################################################

@ARGV > 0 and not -t STDIN or usage($0);

# We support tracking multiple process names.  Fill @trackedNames with the
# process names to match (via regular expressions).  The process IDs that we
# are currently tracking will be stored in %trackedPids.
my @trackedNames = @ARGV;
my %trackedPids = ();

# Flush all writes immediately.  This is necessary as we expect this script to
# be placed between two other programs in a pipe which outputs text very slowly
# (adb logcat outputs only when events happen), so it's rare to fill up the
# buffer quickly.  Without this, the normal buffering that occurs between piped
# programs not directly attached to a pty would prevent the user from seeing
# messages as they arrive.
$| = 1;

# Lookup the pids of the processes before we start.  From then on, rely on
# the ActivityManager to tell us as the processes dies and starts.
my $numPids = get_pids();
if ($numPids == 0) {
	print "- waiting for process ", join(' or ', @trackedNames), " -\n";
}

while (<STDIN>) {
	my $line = $_;
	my ($time, $pid, $ppid, $level, $tag, $message) = $line =~
			m/^([0-9-\s:.]+)\s+(\d+)\s+(\d+)\s+([A-Z])\s+(.*?)\s*: (.*)$/;
	if ($pid == 0) {
		($level, $tag, $pid, $message) = $line =~
			m/^([A-Z])\/(.*?)\(\s*(\d+)\s*\): (.*)$/;
	}

	# print line if does not match the regex
	if ($pid == 0 && $tag == 0) {
		print $line;
		next;
	}

	chomp $message;

	if ($tag eq 'ActivityManager') {
		if ($message =~ m/^Start proc (.*?) .*?: pid=(\d+) /) {
			if (match_name($1)) {
				$trackedPids{$2} = 1;
				print $line;
			}
		} elsif ($message =~ m/Start proc (\d+):(.*?)\//) {
			if (match_name($2)) {
				$trackedPids{$1} = 1;
				print $line;
			}
		} elsif ($message =~ m/Process (.*?) \(pid (\d+)\) has died./) {
			if (match_name($1)) {
				delete $trackedPids{$2};
				print $line;
			}
		} elsif ($message =~ m/Killing (\d+):(.*?)\//) {
			if (match_name($2)) {
				delete $trackedPids{$1};
				print $line;
			}
		}
	} elsif ($trackedPids{$pid} || in_list($tag, @trackedNames)) {
		print $line;
	}
}

###############################################################################

sub in_list($@) {
	my $needle = shift;
	my @haystack = @_;

	foreach my $hay (@haystack) {
		if ($hay eq $needle) {
			return 1;
		}
	}
	return 0;
}

sub get_pids {
	my @ps = qx{adb wait-for-device && adb shell ps};
	if (@ps == 0) {
		return -1;
	}
	my @columns = split /\s+/, (shift @ps);

	if (! in_list("S", @columns)) {
		# There's a "STATE" column slipped in between WCHAN and NAME that has no
		# room for a column name...
		splice @columns, $#columns, 0, 'STATE';
	}

	my $numFound = 0;

	foreach (@ps) {
		s/\s+$//;
		my @data = split /\s+/, $_, scalar @columns;
		my %row = map { $_ => (shift @data) } @columns;

		if (match_name($row{NAME})) {
			$trackedPids{$row{PID}} = 1;
			$numFound++;
		}
	}

	return $numFound;
}

sub match_name {
	my $name = shift;
	foreach (@trackedNames) {
		return 1 if $_ and $name =~ $_;
	}
	return 0;
}

sub usage {
	my $prog = shift;
	die <<"EOF"
Usage: adb logcat | $0 <process-name-regex-or-tag> [<process2-name-regex-or-tag> ...]

Process names will be matched against the given regular expression(s),
and only the matching processes will be shown in the output.
Or the tag is equals to the it and it will be shown.

Usually, `process-name' is usually the same as your package, but not
necessarily.  To make sure, type `adb shell ps' and look through the list.
EOF
}

